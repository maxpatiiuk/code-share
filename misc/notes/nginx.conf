# create one worker per core
worker_processes auto;

# Verbose log output
error_log  logs/error.log info;
access_log  logs/access.log main;
user www www;

http {
  gzip on;
  gzip_types text/plain application/xml application/json;

  deny 192.168.1.2;

  root /var/www/site.com;

  # Include other config files
  include /etc/nginx/static_files.conf;

  # Load balancer
  # Choose a server based on IP address hash to ensure same client
  # is handled by the same server
  # If application is stateless, use "least_conn;" instead
  upstream myapp1 {
    ip_hash;
    # 3 of of 5 requests would go to this server
    server srv1.example.com weight=3;
    server srv2.example.com;
    server srv3.example.com;
  }

  server {
    # Default server means this server would be used if no other server
    # matched (as long as ip:port) matched
    listen *:80 default_server;
    # Listen on IPv6 addresses too;
    listen [::]:80 default_server;

    error_page 500 502 503 504 /50x.html;
    error_page 404 /404.html;

    location /50x.html {
      root html;
    }

    location ~ \.sh $ {
      # Deny access to all shell files
      deny all;
    }

    server_name domain.name another.domain.name *.sub.domain.name;
    return 200 "Some response";

  }

  server {
    # capture domain name into a variable
    server_name ~^(www\.)?(?<domain>.+)$;

    location / {
      # change root based on domain name
      root /sites/$domain;
    }
  }

  server {
    Listen hostname:81;
    listen *:80;
    server_name some.other.domain.name *.domain.name ~^[0-9]*\.domain\.name$;;

    # Match everything that begins with /data
    location /data {

      index index.html index.php;

      client_max_body_size 10m;

      # If /system/maintenance.html is present, use that file, else
      # if uri is /file.html, try that file, else fallback to index.html
      # else 404
      try_files /system/maintenance.html $uri $uri/ index.html =404;
    }

    # Match /static only
    location = /static {
      # Pass requests to a different server
      proxy_pass http://127.0.0.1:8000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      access_log off;
    }

    # Match regex
    location ~ \.(gif|jpg|png)$ {
      root /data/images;
    }

  }

  # HTTPS server
  server {
    listen 443 ssl;
    server_name localhost;
    keepalive_timeout   70;

    # if multiple SSL servers are present, move this to the http scope
    ssl_certificate cert.pem;
    ssl_certificate_key cert.key;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m 2s;
    ssl_prefer_server_ciphers on;

    location / {
      root html;
      index index.html index.htm;
    }
  }

}
